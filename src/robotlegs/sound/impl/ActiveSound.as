/**
 *
 * Copyright 2012(C) by Piotr Kucharski.
 * email: suspendmode@gmail.com
 * mobile: +48 791 630 277
 *
 * All rights reserved. Any use, copying, modification, distribution and selling of this software and it's documentation
 * for any purposes without authors' written permission is hereby prohibited.
 *
 */
package robotlegs.sound.impl
{
	import com.greensock.TweenLite;

	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.media.SoundTransform;

	import robotlegs.sound.dsl.ISoundListener;
	import robotlegs.sound.dsl.ISoundType;

	/**
	 *
	 * @author suspendmode@gmail.com
	 *
	 */
	public class ActiveSound implements ISoundType, ISoundListener
	{

		public static const ENDLESS_LOOP:int=-1

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var loops:int=0;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var delayTimeoutID:int=-1;


		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var fadeOutTime:Number=0;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var fadeTween:TweenLite;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public const soundCompleteListeners:Vector.<Function>=new Vector.<Function>();

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public const completeListeners:Vector.<Function>=new Vector.<Function>();

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var sound:Sound;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var soundID:String;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var id:String;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var fadeInTime:Number=0;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var delayTime:Number=0;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public var startTime:Number=0;

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		[PreDestroy]
		public function dispose():void
		{
			while (soundCompleteListeners.length)
			{
				soundCompleteListeners.shift();
			}
			while (completeListeners.length)
			{
				completeListeners.shift();
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 *
		 * @param volume
		 * @param pan
		 * @return
		 *
		 */
		public function shot(volume:Number=1, pan:Number=0):ISoundListener
		{
			this.volume=volume;
			this.pan=pan;
			this.loops=0;
			return this;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 *
		 * @param loops
		 * @param volume
		 * @param pan
		 * @return
		 *
		 */
		public function loop(loops:int=1, volume:Number=1, pan:Number=0):ISoundListener
		{
			this.volume=volume;
			this.pan=pan;
			this.loops=loops;
			return this;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 *
		 * @param volume
		 * @param pan
		 * @return
		 *
		 */
		public function endlessLoop(volume:Number=1, pan:Number=0):ISoundListener
		{
			this.volume=volume;
			this.pan=pan;
			this.loops=ENDLESS_LOOP;
			return this;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public function onSoundComplete(callback:Function):void
		{
			soundCompleteListeners.push(callback);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		public function onComplete(callback:Function):void
		{
			completeListeners.push(callback);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		/**
		 *
		 *
		 */
		private function updateSoundTransform():void
		{
			var soundTransform:SoundTransform=soundChannel.soundTransform;
			if (!soundTransform)
			{
				return;
			}
			soundTransform.volume=muted ? 0 : volume;
			soundTransform.pan=pan;
			soundChannel.soundTransform=soundTransform;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		private var _volume:Number=1;

		public function get volume():Number
		{
			return _volume;
		}

		public function set volume(value:Number):void
		{
			if (_volume == value)
				return;
			_volume=value;
			updateSoundTransform();
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		private var _muted:Boolean=false;

		public function get muted():Boolean
		{
			return _muted;
		}

		public function set muted(value:Boolean):void
		{
			if (_muted == value)
				return;
			_muted=value;
			updateSoundTransform();
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////		

		private var _pan:Number=0;

		public function get pan():Number
		{
			return _pan;
		}

		public function set pan(value:Number):void
		{
			if (_pan == value)
				return;
			_pan=value;
			updateSoundTransform();
		}

		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

		private var _soundChannel:SoundChannel;

		public function get soundChannel():SoundChannel
		{
			return _soundChannel;
		}

		public function set soundChannel(value:SoundChannel):void
		{
			if (_soundChannel == value)
				return;
			_soundChannel=value;
            if (value) {
			    updateSoundTransform();
            }
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
}
